// esbuild-plugins.cjs
const path = require('path');
const glob = require('fast-glob');

const dynamicImportGlobPlugin = {
  name: 'dynamic-import-glob',
  setup(build) {
    // Intercept import paths matching our "magic" string 'plugins:all'
    build.onResolve({ filter: /^plugins:all$/ }, args => ({
      path: args.path,
      namespace: 'dynamic-plugins-ns',
      pluginData: { importer: args.importer },
    }));

    // When esbuild tries to load a path in our namespace, we generate the content
    build.onLoad({ filter: /.*/, namespace: 'dynamic-plugins-ns' }, async (args) => {
      const importerDir = path.dirname(args.pluginData.importer);
      const pluginsRoot = path.resolve(process.cwd(), 'src/app/plugins');
      const pluginModulePaths = await glob('**/*.module.ts', { cwd: pluginsRoot, absolute: true });

      const contents = `
        // This file is generated by esbuild-plugins.cjs at build time.
        export const pluginLoaders = {
          ${pluginModulePaths.map(modulePath => {
            // 'src/app/plugins/sample/sample.module.ts' -> 'plugins/sample/sample'
            const pluginKey = path.relative(pluginsRoot, modulePath).replace(/\\/g, '/').replace(/\.ts$/, '');
            // Create a relative import path from the file that will use this map
            // e.g. importerDir = /app/src/app, modulePath = /app/src/app/plugins/sample/sample.module.ts
            // relativePath should be ./plugins/sample/sample.module (or similar)
            let relativePath = path.relative(importerDir, modulePath).replace(/\\/g, '/').replace(/\.ts$/, '');
            // Ensure it's a relative path if it's in the same dir or sub dir
            if (!relativePath.startsWith('.') && !path.isAbsolute(relativePath)) {
              relativePath = './' + relativePath;
            }
            return `'${pluginKey}': () => import('${relativePath}')`;
          }).join(',\n')}
        };
      `;

      return { contents, loader: 'js', resolveDir: importerDir };
    });
  },
};

module.exports = [dynamicImportGlobPlugin];
