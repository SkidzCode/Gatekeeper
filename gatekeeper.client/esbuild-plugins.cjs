// esbuild-plugins.cjs
const path = require('path');
const glob = require('fast-glob');

const dynamicImportGlobPlugin = {
  name: 'dynamic-import-glob',
  setup(build) {
    // Intercept import paths matching our "magic" string 'plugins:all'
    build.onResolve({ filter: /^plugins:all$/ }, args => ({
      path: args.path,
      namespace: 'dynamic-plugins-ns',
      pluginData: { importer: args.importer },
    }));

    // When esbuild tries to load a path in our namespace, we generate the content
    build.onLoad({ filter: /.*/, namespace: 'dynamic-plugins-ns' }, async (args) => {
      const importerDir = path.dirname(args.pluginData.importer);
      // process.cwd() in esbuild context is the project root where angular.json is
      const projectRoot = process.cwd();
      const pluginsRoot = path.resolve(projectRoot, 'src/app/plugins');

      console.log('[ESBUILD PLUGIN] Importer directory:', importerDir);
      console.log('[ESBUILD PLUGIN] Project root:', projectRoot);
      console.log('[ESBUILD PLUGIN] Plugins root:', pluginsRoot);

      // We want to find top-level module files for plugins, e.g., plugins/sample/sample.module.ts
      // Not plugins/sample/feature/feature.module.ts if that exists.
      // The glob pattern '**/*.module.ts' might be too broad if plugins have nested modules.
      // Let's assume for now it's one primary .module.ts per first-level plugin directory.
      // Original problematic glob: const pluginModulePaths = await glob('*/!(sample-routing).module.ts', { cwd: pluginsRoot, absolute: true, onlyFiles: true });

      // Fetch all .module.ts files within the plugins directory and its subdirectories.
      let pluginModulePaths = await glob('**/*.module.ts', { cwd: pluginsRoot, absolute: true, onlyFiles: true });

      console.log('[ESBUILD PLUGIN] Initially discovered plugin module paths:', pluginModulePaths);

      // Filter to keep only modules where the filename matches the directory name (e.g., profile/profile.module.ts)
      // and it's a top-level module within its plugin directory.
      pluginModulePaths = pluginModulePaths.filter(modulePath => {
        const relativePath = path.relative(pluginsRoot, modulePath); // e.g., 'profile/profile.module.ts' or 'sample/feature/feature.module.ts'
        const parts = relativePath.split(path.sep); // e.g., ['profile', 'profile.module.ts'] or ['sample', 'feature', 'feature.module.ts']

        // We are looking for modules like 'pluginName/pluginName.module.ts'
        // So, parts.length should be 2.
        // And parts[0] (directory name) should be equal to parts[1] without '.module.ts'.
        if (parts.length === 2) {
          const dirName = parts[0];
          const moduleFileName = parts[1].replace(/\.module\.ts$/, '');
          return dirName === moduleFileName;
        }
        return false;
      });

      console.log('[ESBUILD PLUGIN] Filtered plugin module paths:', pluginModulePaths);

      const generatedMapEntries = pluginModulePaths.map(modulePath => {
        // relativeFromPluginsRoot will be like 'sample/sample.module.ts'
        const relativeFromPluginsRoot = path.relative(pluginsRoot, modulePath);
        // pluginKey should be like 'plugins/sample/sample'
        const pluginKey = path.join('plugins', relativeFromPluginsRoot.replace(/\.module\.ts$/, '')).replace(/\\/g, '/');

        let relativePathToImport = path.relative(importerDir, modulePath).replace(/\\/g, '/').replace(/\.ts$/, '');
        if (!relativePathToImport.startsWith('.') && !path.isAbsolute(relativePathToImport)) {
          relativePathToImport = './' + relativePathToImport;
        }
        console.log(`[ESBUILD PLUGIN] Generating map entry: Key='${pluginKey}', ImportPath='${relativePathToImport}' (from module: ${modulePath})`);
        return `'${pluginKey}': () => import('${relativePathToImport}')`;
      });

      const contents = `
        // This file is generated by esbuild-plugins.cjs at build time.
        // Importer: ${args.pluginData.importer}
        // Plugins Root: ${pluginsRoot}
        export const pluginLoaders = {
          ${generatedMapEntries.join(',\n')}
        };
      `;
      console.log('[ESBUILD PLUGIN] Generated content for plugins:all:\n', contents);

      return { contents, loader: 'js', resolveDir: importerDir };
    });
  },
};

module.exports = [dynamicImportGlobPlugin];
