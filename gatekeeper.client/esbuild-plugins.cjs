// esbuild-plugins.cjs
const path = require('path');
const glob = require('fast-glob');

const dynamicImportGlobPlugin = {
  name: 'dynamic-import-glob',
  setup(build) {
    // Intercept import paths matching our "magic" string 'plugins:all'
    build.onResolve({ filter: /^plugins:all$/ }, args => ({
      path: args.path,
      namespace: 'dynamic-plugins-ns',
      pluginData: { importer: args.importer },
    }));

    // When esbuild tries to load a path in our namespace, we generate the content
    build.onLoad({ filter: /.*/, namespace: 'dynamic-plugins-ns' }, async (args) => {
      const importerDir = path.dirname(args.pluginData.importer);
      // process.cwd() in esbuild context is the project root where angular.json is
      const projectRoot = process.cwd();
      const pluginsRoot = path.resolve(projectRoot, 'src/app/plugins');

      console.log('[ESBUILD PLUGIN] Importer directory:', importerDir);
      console.log('[ESBUILD PLUGIN] Project root:', projectRoot);
      console.log('[ESBUILD PLUGIN] Plugins root:', pluginsRoot);

      // We want to find top-level module files for plugins, e.g., plugins/sample/sample.module.ts
      // Not plugins/sample/feature/feature.module.ts if that exists.
      // The glob pattern '**/*.module.ts' might be too broad if plugins have nested modules.
      // Let's assume for now it's one primary .module.ts per first-level plugin directory.
      const pluginModulePaths = await glob('*/!(sample-routing).module.ts', { cwd: pluginsRoot, absolute: true, onlyFiles: true });
      // const pluginModulePaths = await glob('**/*.module.ts', { cwd: pluginsRoot, absolute: true, onlyFiles: true });
      // Filter out sample-routing.module.ts explicitly if it's causing issues with the key 'plugins/sample/sample-routing'
      // pluginModulePaths = pluginModulePaths.filter(p => !p.endsWith('sample-routing.module.ts'));

      console.log('[ESBUILD PLUGIN] Discovered plugin module paths:', pluginModulePaths);

      const generatedMapEntries = pluginModulePaths.map(modulePath => {
        const relativeFromPluginsRoot = path.relative(pluginsRoot, modulePath); // e.g., 'sample/sample.module.ts'
        // Key should be like 'plugins/sample/sample' to match app-routing.module.ts
        const pluginKey = path.join('plugins', relativeFromPluginsRoot).replace(/\\/g, '/').replace(/\.ts$/, '');

        let relativePathToImport = path.relative(importerDir, modulePath).replace(/\\/g, '/').replace(/\.ts$/, '');
        if (!relativePathToImport.startsWith('.') && !path.isAbsolute(relativePathToImport)) {
          relativePathToImport = './' + relativePathToImport;
        }
        console.log(`[ESBUILD PLUGIN] Generating map entry: Key='${pluginKey}', ImportPath='${relativePathToImport}' (from module: ${modulePath})`);
        return `'${pluginKey}': () => import('${relativePathToImport}')`;
      });

      const contents = `
        // This file is generated by esbuild-plugins.cjs at build time.
        // Importer: ${args.pluginData.importer}
        // Plugins Root: ${pluginsRoot}
        export const pluginLoaders = {
          ${generatedMapEntries.join(',\n')}
        };
      `;
      console.log('[ESBUILD PLUGIN] Generated content for plugins:all:\n', contents);

      return { contents, loader: 'js', resolveDir: importerDir };
    });
  },
};

module.exports = [dynamicImportGlobPlugin];
